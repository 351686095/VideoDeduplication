# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rpc import rpc_pb2 as rpc_dot_rpc__pb2


class SemanticSearchStub(object):
    """Semantic search service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.query_videos = channel.unary_unary(
                '/rpc.proto.SemanticSearch/query_videos',
                request_serializer=rpc_dot_rpc__pb2.TextSearchRequest.SerializeToString,
                response_deserializer=rpc_dot_rpc__pb2.TextSearchResults.FromString,
                )
        self.get_status = channel.unary_unary(
                '/rpc.proto.SemanticSearch/get_status',
                request_serializer=rpc_dot_rpc__pb2.StatusRequest.SerializeToString,
                response_deserializer=rpc_dot_rpc__pb2.StatusResponse.FromString,
                )


class SemanticSearchServicer(object):
    """Semantic search service
    """

    def query_videos(self, request, context):
        """Perform semantic search by text description
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SemanticSearchServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'query_videos': grpc.unary_unary_rpc_method_handler(
                    servicer.query_videos,
                    request_deserializer=rpc_dot_rpc__pb2.TextSearchRequest.FromString,
                    response_serializer=rpc_dot_rpc__pb2.TextSearchResults.SerializeToString,
            ),
            'get_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_status,
                    request_deserializer=rpc_dot_rpc__pb2.StatusRequest.FromString,
                    response_serializer=rpc_dot_rpc__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.proto.SemanticSearch', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SemanticSearch(object):
    """Semantic search service
    """

    @staticmethod
    def query_videos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.proto.SemanticSearch/query_videos',
            rpc_dot_rpc__pb2.TextSearchRequest.SerializeToString,
            rpc_dot_rpc__pb2.TextSearchResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.proto.SemanticSearch/get_status',
            rpc_dot_rpc__pb2.StatusRequest.SerializeToString,
            rpc_dot_rpc__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EmbeddingsStub(object):
    """Embeddings service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.query_nearest_neighbors = channel.unary_unary(
                '/rpc.proto.Embeddings/query_nearest_neighbors',
                request_serializer=rpc_dot_rpc__pb2.NearestNeighborsRequest.SerializeToString,
                response_deserializer=rpc_dot_rpc__pb2.NearestNeighborsResults.FromString,
                )
        self.get_status = channel.unary_unary(
                '/rpc.proto.Embeddings/get_status',
                request_serializer=rpc_dot_rpc__pb2.EmbeddingsStatusRequest.SerializeToString,
                response_deserializer=rpc_dot_rpc__pb2.StatusResponse.FromString,
                )


class EmbeddingsServicer(object):
    """Embeddings service
    """

    def query_nearest_neighbors(self, request, context):
        """Get nearest neighbors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbeddingsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'query_nearest_neighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.query_nearest_neighbors,
                    request_deserializer=rpc_dot_rpc__pb2.NearestNeighborsRequest.FromString,
                    response_serializer=rpc_dot_rpc__pb2.NearestNeighborsResults.SerializeToString,
            ),
            'get_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_status,
                    request_deserializer=rpc_dot_rpc__pb2.EmbeddingsStatusRequest.FromString,
                    response_serializer=rpc_dot_rpc__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.proto.Embeddings', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Embeddings(object):
    """Embeddings service
    """

    @staticmethod
    def query_nearest_neighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.proto.Embeddings/query_nearest_neighbors',
            rpc_dot_rpc__pb2.NearestNeighborsRequest.SerializeToString,
            rpc_dot_rpc__pb2.NearestNeighborsResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.proto.Embeddings/get_status',
            rpc_dot_rpc__pb2.EmbeddingsStatusRequest.SerializeToString,
            rpc_dot_rpc__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
