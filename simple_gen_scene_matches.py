import click
import numpy as np
from glob import glob
import os
from winnow.utils.matches import get_summarized_matches, unique


@click.command()
@click.option(
    "--source",
    "-s",
    help="path to the folder that contains signatures",
    default="data/representations/scene_signatures",
)
@click.option("--output", "-o", help="path to the output folder where the files will be saved", default="data/")
@click.option(
    "--metric",
    "-m",
    help="distance metric (euclidean / cosine)",
    default="cosine",
)
@click.option(
    "--metric-threshold",
    "-mt",
    help="distance metric threshold",
    default=0.1,
)
@click.option(
    "--matched-videos",
    "-mv",
    help="File containing a list of the videos already matched together",
    default="data/scene_matched_videos.npy",
)
def main(source, output, metric, metric_threshold, matched_videos):

    assert os.path.exists(source), "Source folder does not exist"
    assert os.path.exists(output), "Output folder does not exist"

    scene_signatures_fp = np.array(glob(os.path.join(source, "**/*.npy"), recursive=True))

    print(f"Number of compatible files found at {source}: {len(scene_signatures_fp)}")

    basename = [os.path.basename(x) for x in scene_signatures_fp]

    # This might yield either 1) the original filename or the file path summary generated by our simple_repr abstraction
    original_filename = np.array([x[: x.rfind("(")] for x in basename])
    scene_index = np.array([x[x.rfind("(") + 1 : x.rfind(")")] for x in basename])
    try:
        matched_videos_np = np.load(matched_videos)
    except FileNotFoundError:
        matched_videos_np = []
        print("No previously matched videos found.")

    video_signatures = np.array([np.load(x) for x in scene_signatures_fp])
    new_signatures = np.array(
        [video_signatures[i] for i in range(video_signatures.shape[0]) if original_filename[i] not in matched_videos_np]
    )

    np.save(matched_videos, np.unique(original_filename))

    if len(video_signatures.shape) > 2:
        video_signatures = np.array([x[0] for x in video_signatures])

    match_df = get_summarized_matches(
        video_signatures, new_signatures=new_signatures, distance=float(metric_threshold), metric=metric
    )

    if match_df is None:
        print("No new matches to save.")
    else:
        match_df["query_video"] = original_filename[match_df["query"]]
        match_df["match_video"] = original_filename[match_df["match"]]
        match_df["query_scene"] = scene_index[match_df["query"]]
        match_df["match_scene"] = scene_index[match_df["match"]]
        match_df["query_video_original_path"] = scene_signatures_fp[match_df["query"]]
        match_df["match_video_original_path"] = scene_signatures_fp[match_df["match"]]
        match_df["self_match"] = match_df["query_video"] == match_df["match_video"]
        match_df = match_df.loc[~match_df["self_match"], :]
        match_df["unique_index"] = match_df.apply(unique, axis=1)
        match_df = match_df.drop_duplicates(subset=["unique_index"])

        output_path = os.path.join(output, "scene_matches_simple_gen.csv")
        if len(matched_videos_np) == 0:
            match_df.to_csv(output_path)
        else:
            match_df.to_csv(output_path, mode="a", header=False)
        print(f"Matches file save at:{output_path}")
        print(f"Number of matches saved:{len(match_df)}")


if __name__ == "__main__":
    main()
