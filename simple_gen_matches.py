import click
import numpy as np
from glob import glob
import os
from winnow.utils.matches import get_summarized_matches, unique

# from memory_profiler import profile
import gc
from tqdm import tqdm

tqdm.pandas()


@click.command()
@click.option(
    "--source",
    "-s",
    help="path to the folder that contains signatures",
    default="data/representations/video_signatures",
)
@click.option("--output", "-o", help="path to the output folder where the files will be saved", default="data/")
# @profile(precision=4)
def main(source, output):

    assert os.path.exists(source), "Source folder does not exist"
    assert os.path.exists(output), "Output folder does not exist"

    video_signatures_fp = np.array(glob(os.path.join(source, "**/*.npy"), recursive=True))

    print(f"Number of compatible files found at {source}: {len(video_signatures_fp)}")

    basename = [os.path.basename(x) for x in video_signatures_fp]
    basename = []
    original_filename = []
    video_signatures = []
    for file_path in video_signatures_fp:

        try:
            base = os.path.basename(file_path)
            original_fn = base.split(".npy")[0]
            video_signature = np.load(file_path)
            basename.append(base)
            original_filename.append(original_fn)
            video_signatures.append(video_signature)

        except Exception as e:
            print(f"Error processing file:{file_path}:", e)

    assert len(basename) == len(original_filename) == len(video_signatures), "File Inconsistency found."

    # This might yield either 1) the original filename or the file path summary generated by our simple_repr abstraction

    original_filename = np.array(original_filename)
    video_signatures = np.array(video_signatures)

    if len(video_signatures.shape) > 2:
        video_signatures = np.array([x[0] for x in video_signatures])

    match_df = get_summarized_matches(video_signatures, distance=0.75)
    del video_signatures
    gc.collect()

    print("Removing duplicated matches:")
    match_df["unique_index"] = match_df.progress_apply(unique, axis=1)
    match_df = match_df.drop_duplicates(subset=["unique_index"])
    match_df["query_video"] = original_filename[match_df["query"]]
    match_df["match_video"] = original_filename[match_df["match"]]
    match_df["query_video_original_path"] = match_df["query"].apply(lambda x: video_signatures_fp[x])
    match_df["match_video_original_path"] = match_df["match"].apply(lambda x: video_signatures_fp[x])
    match_df["self_match"] = match_df["query_video"] == match_df["match_video"]
    match_df = match_df.loc[~match_df["self_match"], :]

    output_path = os.path.join(output, "matches_simple_gen.csv")
    match_df.to_csv(output_path)
    print(f"Matches file save at:{output_path}")
    print(f"Number of matches saved:{len(match_df)}")


if __name__ == "__main__":
    main()
